import { AnalysisResult } from "@/types/oracle";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

export const generatePDF = async (result: AnalysisResult, prompt: string) => {
  // Create a new PDF document
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  
  // Add title
  doc.setFontSize(22);
  doc.setTextColor(0, 0, 0);
  doc.text("Oracle AI Analysis Report", pageWidth / 2, 20, { align: "center" });
  
  // Add date
  doc.setFontSize(10);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, 27, { align: "center" });
  
  // Add prompt
  doc.setFontSize(12);
  doc.text("Analysis Prompt:", 15, 40);
  doc.setFontSize(11);
  doc.text(`\"${prompt}\"`, 15, 47);
  
  // Add validation score
  doc.setFontSize(14);
  doc.text(`Validation Score: ${result.validationScore}/100`, 15, 60);
  
  // Add summary
  doc.setFontSize(12);
  doc.text("Executive Summary:", 15, 70);
  doc.setFontSize(11);
  
  const splitSummary = doc.splitTextToSize(result.summary, pageWidth - 30);
  doc.text(splitSummary, 15, 77);
  
  // Add competitors table
  doc.setFontSize(14);
  doc.text("Competitive Analysis", 15, 100);
  
  const competitorData = result.competitors.map(comp => [
    comp.name,
    `${comp.strengthScore}/100`,
    comp.description
  ]);
  
  autoTable(doc, {
    startY: 105,
    head: [['Competitor', 'Strength Score', 'Description']],
    body: competitorData,
    margin: { left: 15 }
  });
  
  // Add pricing table
  const currentY = (doc as any).lastAutoTable.finalY + 15;
  doc.setFontSize(14);
  doc.text("Price Point Recommendations", 15, currentY);
  
  const pricingData = result.priceSuggestions.map(price => [
    price.type,
    price.value,
    price.description
  ]);
  
  autoTable(doc, {
    startY: currentY + 5,
    head: [['Tier', 'Price', 'Description']],
    body: pricingData,
    margin: { left: 15 }
  });
  
  // Add forecast table
  let newY = (doc as any).lastAutoTable.finalY + 15;
  
  // Add a new page if we're getting close to the bottom
  if (newY > 240) {
    doc.addPage();
    newY = 20;
  }
  
  doc.setFontSize(14);
  doc.text(`Forecast (${result.forecasts.timeframe})`, 15, newY);
  
  const forecastData = [
    ['Best Case Revenue', `${result.forecasts.bestCase.revenue}`],
    ['Best Case Market Share', `${result.forecasts.bestCase.marketShare}`],
    ['Best Case Customers', `${result.forecasts.bestCase.customers}`],
    ['Worst Case Revenue', `${result.forecasts.worstCase.revenue}`],
    ['Worst Case Market Share', `${result.forecasts.worstCase.marketShare}`],
    ['Worst Case Customers', `${result.forecasts.worstCase.customers}`]
  ];
  
  autoTable(doc, {
    startY: newY + 5,
    head: [['Metric', 'Projection']],
    body: forecastData,
    margin: { left: 15 }
  });
  
  // Add clients table
  newY = (doc as any).lastAutoTable.finalY + 15;
  
  // Add a new page if we're getting close to the bottom
  if (newY > 240) {
    doc.addPage();
    newY = 20;
  }
  
  doc.setFontSize(14);
  doc.text("Potential Clients", 15, newY);
  
  const clientData = result.clients.map(client => [
    client.name,
    client.industry,
    client.useCase
  ]);
  
  autoTable(doc, {
    startY: newY + 5,
    head: [['Client', 'Industry', 'Use Case']],
    body: clientData,
    margin: { left: 15 }
  });
  
  // Footer
  newY = (doc as any).lastAutoTable.finalY + 15;
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text("Generated by Oracle AI - Startup Analysis Engine", pageWidth / 2, newY, { align: "center" });
  
  // Save the PDF
  const filename = `Oracle_Analysis_${new Date().toISOString().slice(0, 10)}.pdf`;
  doc.save(filename);
};
